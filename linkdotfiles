#!/usr/bin/env python

"""
Link all the files from the current dir to the homedir as dotfiles.

Works only on Unix-like operating systems that support symlinks (obviously)
"""

import os
from fnmatch import fnmatch
from shutil import rmtree
from optparse import OptionParser

# Parse commmandline options
parser = OptionParser()
parser.add_option("-f", "--force", dest="force", default=False, action="store_true",
                  help="forcibly overwrite files in the homedir when creating links")
parser.add_option("-d" ,"--dry-run", dest="dry", default=False, action="store_true", help="Do nothing, just print what would be done")

(options, args) = parser.parse_args()

# Skip these files (uses fnmatch matching)
skip_list = ['linkdotfiles', 'README.markdown', ".git", "3rd-party"]
cwd = os.path.dirname(os.path.realpath(__file__))
cwd = os.path.realpath(cwd)
homedir = os.path.expanduser('~')
files = os.listdir(cwd)

def create_symlink(src, dst):
	if os.environ['TERM'] == 'cygwin':
		os.system('ln -s "%s" "%s"' % (src, dst))
	else:
		os.symlink(source, destination)

for filename in files:
    if True in [fnmatch(filename, pattern) for pattern in skip_list]:
        print 'Skipping %s' % filename
        continue

    source = os.path.join(cwd, filename)
    destination = os.path.join(homedir, filename)

    if os.path.lexists(destination):
        if options.force:
            print 'Deleting %s' % destination
            if not options.dry:
                try:
                    os.remove(destination)
                except OSError:
                    try:
                        rmtree(destination)
                    except OSError, e:
                        print 'Failed to delete %s' % destination
                        continue
        else:
            print 'Not overwriting %s since the file exists already and force (-f) is not in effect' % destination
            continue

    print 'Creating a link to %s at %s.' % (source, destination)
    if not options.dry:
        create_symlink(source, destination)

print 'Done.'
